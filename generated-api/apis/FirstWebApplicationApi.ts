/* tslint:disable */
/* eslint-disable */
/**
 * FirstWebApplication | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Concert,
} from '../models/index';
import {
    ConcertFromJSON,
    ConcertToJSON,
} from '../models/index';

export interface ConcertsIdDeleteRequest {
    id: number;
}

export interface ConcertsIdGetRequest {
    id: number;
}

export interface ConcertsIdPutRequest {
    id: number;
    concert: Concert;
}

export interface ConcertsPostRequest {
    concert: Concert;
}

/**
 * FirstWebApplicationApi - interface
 * 
 * @export
 * @interface FirstWebApplicationApiInterface
 */
export interface FirstWebApplicationApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirstWebApplicationApiInterface
     */
    concertsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Concert>>>;

    /**
     */
    concertsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Concert>>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirstWebApplicationApiInterface
     */
    concertsIdDeleteRaw(requestParameters: ConcertsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    concertsIdDelete(requestParameters: ConcertsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirstWebApplicationApiInterface
     */
    concertsIdGetRaw(requestParameters: ConcertsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    concertsIdGet(requestParameters: ConcertsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} id 
     * @param {Concert} concert 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirstWebApplicationApiInterface
     */
    concertsIdPutRaw(requestParameters: ConcertsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    concertsIdPut(requestParameters: ConcertsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {Concert} concert 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirstWebApplicationApiInterface
     */
    concertsPostRaw(requestParameters: ConcertsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    concertsPost(requestParameters: ConcertsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirstWebApplicationApiInterface
     */
    rootGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    rootGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}

/**
 * 
 */
export class FirstWebApplicationApi extends runtime.BaseAPI implements FirstWebApplicationApiInterface {

    /**
     */
    async concertsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Concert>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/concerts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConcertFromJSON));
    }

    /**
     */
    async concertsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Concert>> {
        const response = await this.concertsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async concertsIdDeleteRaw(requestParameters: ConcertsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling concertsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/concerts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async concertsIdDelete(requestParameters: ConcertsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.concertsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async concertsIdGetRaw(requestParameters: ConcertsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling concertsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/concerts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async concertsIdGet(requestParameters: ConcertsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.concertsIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async concertsIdPutRaw(requestParameters: ConcertsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling concertsIdPut().'
            );
        }

        if (requestParameters['concert'] == null) {
            throw new runtime.RequiredError(
                'concert',
                'Required parameter "concert" was null or undefined when calling concertsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/concerts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConcertToJSON(requestParameters['concert']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async concertsIdPut(requestParameters: ConcertsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.concertsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async concertsPostRaw(requestParameters: ConcertsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['concert'] == null) {
            throw new runtime.RequiredError(
                'concert',
                'Required parameter "concert" was null or undefined when calling concertsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/concerts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConcertToJSON(requestParameters['concert']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async concertsPost(requestParameters: ConcertsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.concertsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async rootGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async rootGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.rootGetRaw(initOverrides);
        return await response.value();
    }

}
